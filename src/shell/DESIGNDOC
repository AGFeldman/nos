			+------------------+
			|      CS 124      |
			| PROJECT 1: SHELL |
			|  DESIGN DOCUMENT |
			+------------------+
				   
---- GROUP ----

>> Fill in the names and email addresses of your group members.

Julie Kew <julie.kew@gmail.com>
Aaron Feldman <feldmando@gmail.com>

>> Specify how many late tokens you are using on this assignment:  0

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL: https://github.com/AGFeldman/nos
   commit TODO(agf)

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please include them here.

Readline capabilities are implemented as extra credit. User can scroll through
previous commands, and user can print previous commands with internal `history`
command.

We needed to install extra packages for the readline library:
`sudo apt-get install libreadline6 libreadline6-dev`

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

The Ubuntu man page for pipe has a really helpful example.

I found the `strace` utility to be useful, as well as `ps aux | grep ...`.

For readline stuff, I glanced through these pages: 
https://cnswww.cns.cwru.edu/php/chet/readline/history.html
https://www.cs.swarthmore.edu/~newhall/unixhelp/C_cool_utils.html

			   COMMAND SHELL
			   =============

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

Julie: 12 hours
Aaron: 13 hours

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

Julie: Parsing
Aaron: Fork children and execute commands; readline

---- DATA STRUCTURES ----

>> A1: Describe how your command shell manages parsing and executing
>> commands that contain arguments and pipes, using the example
>> command "a arg1 arg2 | b arg1 | c arg1 arg2 arg3".  How does your
>> shell internally represent such a command?

The command shell has a setting to represent its "state":
either it is parsing a new command, redirecting input or redirecting output. 
It begins in the "new command" state and iterates through chars, keeping track
of number of tokens seen, until it reaches a pipe or redirect character or end
of command. Then it creates a new command struct, which includes 
input and output redirect string pointers, a pointer to the next struct in the
list, and an array of pointers to the tokens in the command. A second function
populates this array. 

For execution, the parent forks off a new process for each command. The parent
creates a pipe for each pair of adjacent children, and the children set up the
pipe with their STDIN/STDOUT. Then, the children execute the commands.

>> A2: Now, given the command:
>> "a arg1 arg2 < inp.txt | b arg1 | c arg1 arg2 arg3 > out.txt"
>> Briefly explain specifically how the redirections are parsed and
>> represented, and by what processes.

If the parsing function finds a redirect character, it changes its state to
indicate that it is now parsing a redirect location instead of a new command.
It continues to iterate as usual; then when it finds the next braking character
(pipe or redirect or end of string) it amends the input/output field of the
command at the tail of the linked list (first checking that it has found exactly
one token).

---- ALGORITHMS ----

>> A3: Illustrate how you solved the problem of setting up
>> redirection in a simple command like "a < inp.txt > out.txt", by
>> describing what process takes care of the redirection and when.

The function handle_commands forks off a child process to handle the command.
The child process sees that it has "inp.txt" in its input field, opens the file,
and copies the file descriptor into the standard input file descriptor.
Likewise for "out.txt" and standard output. Then it executes "a".

>> A4: Illustrate how you solved the problem of setting up the pipes
>> between multiple operations in a single command, by describing
>> what each process is responsible for.  For example, given the
>> command "a | b | c", describe the sequence of steps in setting up
>> the processes and their pipes, starting with your command shell's
>> process, and going through the execution of programs a, b and c.
>> Keep your description of each process' responsibilities limited to
>> ~25 words or less.

The parent process sets up a pipe for a and b and forks off child 1, then
(recursively calling the handling function) sets up a pipe for b and c
and forks off child 2, closes its copies of both ends of pipe a-b, 
forks off child 3 and closes its copies of both ends of pipe b-c.

Child 1 sets its output to the write-end of a-b and closes the read-end, 
then executes a.

Child 2 sets its input to the read-end of a-b and closes the write-end, 
sets its output to the write-end of b-c and closes the read-end, 
then executes b.

Child 3 sets its input to the read-end of b-c and closes the write-end, 
then executes c.

>> A5: Similarly, describe the details of how terminated processes are
>> reaped in the example command "a | b | c".

After the parent process forks off the three child processes,
it calls waitpid() to wait for each to complete, thus reaping them.

>> A6: Similarly, describe which processes are responsible for setting
>> up the redirections in the example command
>> "a < inp.txt | b | c > out.txt".

Child 1 sets up the input redirection and child 3 the output redirection
before they attempt to execute their commands.

---- RATIONALE ----

>> A7: Why must the chdir and exit commands be implemented as built-in
>> functions, rather than external programs?

If chdir and exit were external programs, the parent would have to fork off
children to handle them, and the children would then be tasked with changing
the working directory of or killing the parent, which they cannot do (at least,
not without some inter-process communication).

>> A8: Why did you ultimately choose this design?  In what ways is it
>> superior to other designs you considered as you developed your solution?

We considered several alternatives for string parsing, including tokenizing
everything before separating commands and allocating the memory for all
the tokens of one command at once. The chosen design (separating commands then
tokenizing and allocating an array of pointers, but not strings, together)
makes it simpler to determine which tokens are part of commands and which are
redirects, and allows for detecting invalid sequences earlier. 
The array of pointers is easy to pass to execvp and simple to allocate
because the number of tokens is already known.

Instead of recursing through the linked list of commands, we could have
counted the commands and used a for-loop to execute each. But that was
unnecessary and this method keeps track of fewer states, so the code is cleaner.

The command handling function checks for the first command being internal 
and executes it, ignoring anything else (if an internal command occurs anywhere
else, an error is reported). This is simpler than trying to handle internal
commands in any other way. 

			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any one of the three problems
>> in it, too easy or too hard?  Did it take too long or too little time?

This assignment was a good difficulty

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

I really loved using fork() and understand it better because of this assignment.

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

We had to figure out that the write end of all copies of a pipe needs to be
closed before EOF is sent. Meh.

The example in the assignment is a pipe between parent and child, but we ended
up using a pipe between two children. This wasn't really misleading, though.

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?

