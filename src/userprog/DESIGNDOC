                     +--------------------------+
                     |          CS 124          |
                     | PROJECT 4: USER PROGRAMS |
                     |     DESIGN DOCUMENT      |
                     +--------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Julie Kew <julie.kew@gmail.com>
Aaron Feldman <feldmando@gmail.com>

>> Specify how many late tokens you are using on this assignment: 
Using 1 late token

>> What is the Git repository and commit hash for your submission?
>> (You only need to include the commit-hash in the file you submit
>> on Moodle.)

   Repository URL: https://github.com/AGFeldman/nos
   commit TODO(agf)

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

Tests hang when running with QEMU. We had to run with bochs: `make
SIMULATOR="--bochs" check`.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

Talked briefly with Jalen Green and Keegan Ryan about process_wait().

			               USER PROGRAMS
			               =============

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
>> Make sure that each member's total time is listed.

Julie: 15 hours
Aaron: 18 hours

>> L2: What did each team member focus on for this assignment?  Keep
>> descriptions to 25-30 words or less.

Julie: sys_open, sys_read, sys_write, other syscalls, debugging, DESIGNDOC.
Aaron: debugging, DESIGNDOC, everything else.

                           ARGUMENT PASSING
                           ================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

No new or changed items of the form mentioned above. However, start_process()
was changed to take `void * aux` as an argument, which is a pointer to a
stack-allocated array of three uint32_t's, which are then converted to pointers
to other types.

See question B1 for changes that are relevant to system calls.

---- ALGORITHMS ----

>> A2: Briefly describe how you implemented argument parsing.  How do
>> you arrange for the elements of argv[] to be in the right order?
>> How do you avoid overflowing the stack page?

We push a command's argument strings onto the stack in the order in which they
appear after the command (so, the last command string has the lowest address on
the stack). Then, we iterate through the stack from top to bottom (lowest
address to highest address) to find exactly where the string arguments ended up
on the stack, and we push pointers to these arguments onto the stack in the
order in which we find the arguments. 
TODO(agf): We do not take precautions against overflowing the stack.

---- RATIONALE ----

>> A3: Why does Pintos implement strtok_r() but not strtok()?

strtok_r() is re-entrant, but strtok() is not. Everything that you can do with
strtok(), you can do with strtok_r(), so including strtok() would be
unnecessary and potentially lead to bugs if programmers use it from multiple
concurrent threads.

>> A4: In Pintos, the kernel separates commands into a executable name
>> and arguments.  In Unix-like systems, the shell does this
>> separation.  Identify at least two advantages of the Unix approach.

Having the shell separate commands moves more code out of the kernel,
which reduces the possibility of kernel bugs, makes the kernel less cumbersome,
and makes the system more modular.

                             SYSTEM CALLS
                             ============

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

// To ensure only one process manipulates the file system at a time:
static struct lock filesys_lock;

// The maximum number of pointers to open file descriptors that each thread
// holds in its thread struct
#define MAX_FILE_DESCRIPTORS 16

// New members of the `thread` struct:
    // For keeping track of the pointers to file structs a process currently
    // has open:
    /* Fixed-size array of pointers to open file structs */
    struct file *open_files[16];
    
    // For keeping track of parent-child relationships:
    /*! List element for the parent's child_list */
    struct list_elem child_list_elem;
    /*! List of children */
    struct list child_list;
    
    // For releasing the file system lock when a thread holding it dies:
    /*! Lock released when thread dies */
    struct lock life_lock;

    /*! Used to store exit status upon exit() syscall invocation. */
    int exit_status;

    /*! The executable file for this process, if applicable. */
    struct file * executable;

// The number of bytes in a page, since that does not appear to be defined 
// elsewhere. This could be used in a function that validates a range of 
// user pointers. We do not end up using it.
#define PAGE_SIZE_BYTES

>> B2: Describe how file descriptors are associated with open files.
>> Are file descriptors unique within the entire OS or just within a
>> single process?

File descriptors are indices (offset to account for stdio) into into arrays of
file struct pointers specific to each process.

---- ALGORITHMS ----

>> B3: Describe your code for reading and writing user data from the
>> kernel.

Whenever the user attempts to access data, all pointers are checked for 
validity - they must be not null, in userspace, and initialized.
This is all checked before dereferencing the pointers.
TODO(agf): This is the idea, but in practice, we might neglect to check some of
these pointers.

>> B4: Suppose a system call causes a full page (4,096 bytes) of data
>> to be copied from user space into the kernel.  What is the least
>> and the greatest possible number of inspections of the page table
>> (e.g. calls to pagedir_get_page()) that might result?  What about
>> for a system call that only copies 2 bytes of data?  Is there room
>> for improvement in these numbers, and how much?

In checking pointer validity, the kernel inspects the first address, the
addresses p + 4096n up to the last relevant address, and the final address.  So
a full page would cause two page table inspections, as would 2 bytes.  If we
had a good way of checking whether two addresses were in the same page, we
would be able to improve performance for calls using less than a page by
inspecting the page table only once. Such a "good method" could for example be
a check of whether the two addresses have the same value modulo 4096, which
*might* that the addresses are in the same page; but, this depends on how pages
are laid out.

>> B5: Briefly describe your implementation of the "wait" system call
>> and how it interacts with process termination.

When wait() is called, the process searches through its list of children to 
verify that the pid given is a valid one, then tries to acquire the life_lock
of that child, which is released upon death.

>> B6: Any access to user program memory at a user-specified address
>> can fail due to a bad pointer value.  Such accesses must cause the
>> process to be terminated.  System calls are fraught with such
>> accesses, e.g. a "write" system call requires reading the system
>> call number from the user stack, then each of the call's three
>> arguments, then an arbitrary amount of user memory, and any of
>> these can fail at any point.  This poses a design and
>> error-handling problem: how do you best avoid obscuring the primary
>> function of code in a morass of error-handling?  Furthermore, when
>> an error is detected, how do you ensure that all temporarily
>> allocated resources (locks, buffers, etc.) are freed?  In a few
>> paragraphs, describe the strategy or strategies you adopted for
>> managing these issues.  Give an example.

We have a function check_pointer_validity() which exits with a return value of
-1 upon failure through the function sys_exit_helper(). This makes the code
perfectly readable and provides a convenient place to check that all resources
are freed. In particular, if the process has acquired the file system lock, 
it releases it here.

It's possible syscall should be freeing read/write buffers when bad pointers 
are passed, but currently it does not. [TODO(agf)]

---- SYNCHRONIZATION ----

>> B7: The "exec" system call returns -1 if loading the new executable
>> fails, so it cannot return before the new executable has completed
>> loading.  How does your code ensure this?  How is the load
>> success/failure status passed back to the thread that calls "exec"?

Background: The "exec" system call results in a call to process_execute(),
which calls thread_create() to start a thread that runs start_process(), and 
start_process() loads the executable and jumps to it.

We modified the arguments of start_process() to include two additional
arguments: A semaphore and a pointer to a "loaded" boolean. The semaphore's
count is initially zero, and the parent process, which is running
process_execute, calls sema_down() after creating the child. This ensures that
the parent process will not finish process_execute() until the child calls
sema_up(), which the child does after it loads the executable. The child
records whether the executable loaded successfully using the "loaded" boolean.

>> B8: Consider parent process P with child process C.  How do you
>> ensure proper synchronization and avoid race conditions when P
>> calls wait(C) before C exits?  After C exits?  How do you ensure
>> that all resources are freed in each case?  How about when P
>> terminates without waiting, before C exits?  After C exits?  Are
>> there any special cases?

When wait(C) gets called before C exits, the parent thread will block, waiting
for the child to release its life_lock, which the child only releases when it
terminates.

If wait(C) get called after C exits, the parent process collects information
such as exit status from the child thread, which has already released its
life_lock. I think this collection might possible because the thread struct for
the child thread is never cleaned up, which seems like it leaks resources :(
TODO(agf) It seems like the special cases, including orphaned children, are
relevant for resource cleanup, and we might not be doing this resource cleanup.

---- RATIONALE ----

>> B9: Why did you choose to implement access to user memory from the
>> kernel in the way that you did?

This seemed like the most straightforward way. Check all the pointers up front,
then use them freely.

>> B10: What advantages or disadvantages can you see to your design
>> for file descriptors?

Advantages are that it's simple and did not require modifying the file system.
Disadvantages are the relatively large amount of space the file table takes up
in a thread and the small number of files that can be open.

>> B11: The default tid_t to pid_t mapping is the identity mapping.
>> If you changed it, what advantages are there to your approach?

We did not change this mapping.

			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

It took quite a while to work through Pintos figuring out how everything
interacts. There may not be much that can be done about this, but it would have
been useful to see, for instance, a trace of what happens when a syscall occurs
or to have a list of the files syscall might include. (Maybe we should just use
gdb to produce the syscall trace.)

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?

