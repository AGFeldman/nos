			+-----------------------+
			|         CS 124        |
			| PROJECT 2: BOOTLOADER |
			|    DESIGN DOCUMENT    |
			+-----------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Julie Kew <julie.kew@gmail.com>
Aaron Feldman <feldmando@gmail.com>

>> Specify how many late tokens you are using on this assignment: 0 

>> What is the Git repository and commit hash for your submission?
   (You only need to include the commit-hash in the file you submit
   on Moodle.)

   Repository URL: https://github.com/AGFeldman/nos
   commit TODO(agf)

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

Sources that Aaron consulted for bootloader and interrupt handling. Note: I am
not particularly recommending any of these sources as awesome references. This
list is basically a record of my open browser tabs :)
- CS24 Lecture 5
- CS24 Lecture 6
- Slide 17 of CS124 Lecture 5
- http://pages.cs.wisc.edu/~remzi/Classes/354/Fall2012/Handouts/Handout-IA32-registers.pdf
- https://en.wikipedia.org/wiki/INT_13H
- https://web.stanford.edu/class/cs107/IA32_Cheat_Sheet.pdf
- https://en.wikipedia.org/wiki/Executable_and_Linkable_Format#File_header
- http://wiki.osdev.org/Printing_to_Screen
- Intel IA32 Manual, Volume 3A, Section 5.11
- http://stackoverflow.com/questions/16255608/calling-c-functions-from-x86-assembly-language
- http://wiki.osdev.org/PS/2_Keyboard


			     PC BOOTER
			     =========

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
   Make sure that each member's total time is listed.

TODO(agf)

>> L2: What did each team member focus on for this assignment?  Keep
   descriptions to 25-30 words or less.

Aaron: Bootloader and setting up interrupt handling
Julie: Game design and implementation

Note that this design document is a bit long.  Most of the questions can be
answered pretty briefly.  Don't feel a need to write a long answer if it is
not required by the question.

			     GAME / DEMO
			     ===========

---- ALGORITHMS ----

>> A1: In 25-30 words or less, what does your PC booter do?

Computer will boot into a 1-player video game that runs without an operating
system (i.e., the game is the operating system). Booting tasks include copying
the main program into memory, setting up interrupts, and beginning program
execution.

>> A2: In 25-30 words or less, how does the user interact with the program?
>> What are the controls?  What should the user try to do?

The user causes his or her video game avatar to move by pressing the arrow
keys. The video game objective is to get your avatar to the right side of the
screen without getting hit by fire from the sky.

---- DATA STRUCTURES ----

>> A3: Describe any global state that your program manages in order to
>> perform its operations.  Don't focus on state managed within interrupt
>> handlers; we will look at that later.  Rather, focus on state that is
>> part of the game implementation itself.

Game state keeps track of the location of the user's avatar and the locations
and speed of sky-fireballs. This data is held in globals variables. There is
one struct to hold information about the users's avatar, and an array of
structs to hold information about fireballs.

---- SYNCHRONIZATION ----

>> A4: From the perspective of the entire program, briefly describe how
>> the various interrupts are handled and processed within your program.
>> For example, when a timer interrupt occurs, what is the general sequence
>> of operations or updates that is performed within your program?
>> Similarly, when a keyboard interrupt occurs, what does your program do
>> in response?

TODO(agf)

>> A5: Would you say your program relies on polling or busy-waiting anywhere
>> to accomplish its tasks?  If so, what tasks?

TODO(agf)

---- RATIONALE ----

>> A6: Why did you choose the project you did?

We aimed for a simple demonstration of keyboard and timer interrupt handling.

We were interested in choosing a game that we would be excited about
programming. But, we didn't want to over-commit, so we wanted a game that could
be implemented incrementally and whose "minimum viable product" was simple. If
we spent more time, we would be interested in implementing a pseudo-random
number generator and trying to e.g. high-score data on the boot drive.

>> A7: Did your choice of project affect any of the specific implementation
>> details of the various subsystems that you needed to use?  (For example,
>> if you implemented a scrolling game, did you implement specialized high-
>> performance video code to scroll the screen?)

Our project did not require anything special beyond the booting and interrupt
handling setup.

>> A8: Did you run into any technical or resource limitations in the
>> implementation of your program?  (For example, bootloader didn't fit,
>> or a really useful standard library wasn't available, or you couldn't
>> achieve the desired performance level, etc.)  If so, what steps did you
>> take to try to overcome those limitations?

We had plenty of bugs, but no real technical limitations. If we sought to use
random numbers, it seems that we would have had to implement our own
pseudo-random number generator.

			     BOOT SECTOR
			     ===========

---- DATA STRUCTURES ----

>> B1: How did you decide to store the Disk Address Packet?  Does the
>> memory occupied by the DAP get reclaimed after it is used?  If not,
>> why not?

We set up the Disk Address Packet by pushing 2-byte constants onto the stack.
The this memory got reclaimed after use by moving the stack pointer backwards
by 16 bytes (the size of the DAP) after use.

>> B2: Does your bootloader pass any information to the main program?
>> (If not, just say no.)  If so, what information is passed, and how
>> is it passed?

No

---- ALGORITHMS ----

>> B3: Briefly describe how your bootloader brings your program into
>> memory.  Does it perform one large load, or multiple smaller loads?

The bootloader brings the main program into memory all at once. That is, the
program is loaded to a hard-coded address by using a single Data Address Packet
and a single call to int 13h / extended read operation. This read operation
load up to 126 sectors at once.

>> B4: Did you add any BIOS calls to your bootloader to prepare for your
>> main program?  (i.e. things that aren't available in protected mode)

No

			  VIDEO SUBSYSTEM
			  ===============

---- DATA STRUCTURES ----

>> C1: What video display mode does your program use?  Is it a text mode
>> or a graphical mode?  Where does the video buffer start?  How is data
>> represented in this mode?  (Please be brief; we don't need complete
>> documentation on the video system.)

Text mode. Video buffer starts at address 0xB8000, which is hardware-dependent.
In this mode, the screen is a grid of 80x25 extended ASCII characters. Each
on-screen character is represented by two bytes in the video buffer: One byte
for foreground and background color information, and one byte for the extended
ASCII character.

>> C2: Does your video code maintain any variables or data structures to
>> facilitate video output?  Briefly describe these values and their
>> purposes here.

TODO(agf)
We use a basic API to draw on screen, but this API does not maintain any state
other than the video buffer itself.

---- ALGORITHMS ----

>> C3: What abstraction does your video code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.

The two main functions in our video API are paint_display() and write_string().
paint_display() paints the entire display with one solid color. write_string()
writes a specified string to the display using specified color and screen
location.

---- RATIONALE ----

>> C4: Did you take any specific steps to improve the appearance of your
>> program's display output?  For example, using Extended ASCII Codes, or
>> choosing specific colors to represent different things?

We used extended ASCII characters to make the avatar appear more person-like.
We felt that fireballs ought to be red.

			  TIMER SUBSYSTEM
			  ===============

---- DATA STRUCTURES ----

>> D1: What state does your timer subsystem manage?  Describe the variables
>> or data structures that it maintains, and how they are used.

TODO(agf)

---- ALGORITHMS ----

>> D2: What abstraction does your timer code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.

TODO(agf)

>> D3: Did you change the timer frequency from 100Hz?  If so, what did you
>> change it to, and why?

No, we did not encounter any need to change the timer frequency, although we
considered changing it for debugging.

---- SYNCHRONIZATION ----

>> D4: Given how your program handles timer events, is there any potential
>> for timer interrupts to generate race conditions in updating your
>> program's global state?  If so, what steps did you take to ensure that
>> such situations cannot occur?

TODO(agf)

			KEYBOARD SUBSYSTEM
			==================

---- DATA STRUCTURES ----

>> E1: What state does your keyboard subsystem manage?  Describe the variables
>> or data structures that it maintains, and how they are used.

TODO(agf)

>> E2: How do your data structures handle keys with multi-byte scan-codes?

TODO(agf)

---- ALGORITHMS ----

>> E3: What abstraction does your keyboard code present to your main program?
>> Briefly describe the higher-level operations you decided to implement.

TODO(agf)

>> E4: Does your keyboard subsystem expose scan-codes directly to your main
>> program, or does it preprocess them and expose other information to your
>> main program?  If scan-code data is preprocessed, briefly describe what
>> information is actually exposed, and how it is derived from scan-codes.

TODO(agf)

---- SYNCHRONIZATION ----

>> E5: Given how your keyboard interrupt handler operates, is there any
>> potential for race conditions in updating the keyboard subsystem's
>> internal state?  If so, what steps did you take to ensure that such
>> situations cannot occur?

TODO(agf)

>> E6: Given how your program handles keyboard events, is there any
>> potential for keyboard interrupts to generate race conditions in updating
>> your program's global state?  If so, what steps did you take to ensure
>> that such situations cannot occur?

TODO(agf)

---- RATIONALE ----

>> E7: Why did you choose the design and data representation that your
>> keyboard subsystem uses?  How is it suited to your program's overall
>> operation?

TODO(agf)

			  SURVEY QUESTIONS
			  ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

Not really. There was a good amount of stuff to look up for bootloading /
interrupt handling.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

Appreciate background info about interrupt table setup. Feel that we better understand how execution flow can be interrupted by interrupts.

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

It would have been nice to see an example about using extended ASCII.

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?

