       	       	    +---------------------------+
                    |           CS 124          |
                    | PROJECT 5: VIRTUAL MEMORY |
                    |      DESIGN DOCUMENT      |
                    +---------------------------+

---- GROUP ----

>> Fill in the names and email addresses of your group members.

Julie Kew <julie.kew@gmail.com>
Aaron Feldman <feldmando@gmail.com>

>> Specify how many late tokens you are using on this assignment:  

7 late tokens

>> What is the Git repository and commit hash for your submission?
>> (You only need to include the commit-hash in the file you submit
>> on Moodle.)

   Repository URL:  https://github.com/AGFeldman/nos
   commit a95d57ca534f1685f6244a1e53f6f43b32ca6318

---- PRELIMINARIES ----

>> If you have any preliminary comments on your submission, notes for the
>> TAs, or extra credit, please give them here.

We ran tests with bochs: make SIMULATOR="--bochs" check

Since synchronization bugs are the devil: On my machine, this passes all
vm/ tests except multi-recurse, with the default jitter value.

>> Please cite any offline or online sources you consulted while
>> preparing your submission, other than the Pintos documentation, course
>> text, lecture notes, and course instructors.

---- LOGISTICS ----

These questions will help us to keep track of the difficulty level of
assignments, as well as keeping track of which team members worked on
which parts.

>> L1: How many hours did each team member spend on this assignment?
>> Make sure that each member's total time is listed.

Julie: >15 hours
Aaron: >23 hours

>> L2: What did each team member focus on for this assignment?  Keep
>> descriptions to 25-30 words or less.

Julie: MMapped files, some DESIGNDOC
Aaron: Everything else

Note that this design document is a bit long.  Most of the questions can be
answered pretty briefly.  Don't feel a need to write a long answer if it is
not required by the question.

			PAGE TABLE MANAGEMENT
			=====================

---- DATA STRUCTURES ----

>> A1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

# In each USERPROG thread struct, we add a field for the supplemental page 
# table:
    struct hash spt;

# From page.h:
# Sorry this is messy, it's right before 2am:
struct spt_key {
    // User virtual address, which we will use as the input to a hash function.
    // This address should be the start of a page. TODO(agf): Assert this
    // in the appropriate functions, such as spt_entry_hash() and
    // spt_entry_lookup().
    void *addr;
};

// Supplemental page table entry
struct spt_entry {
    // The page-directory and user-virtual-address combination that uniquely
    // identifies this spt_entry.
    struct spt_key key;

    // Hash table element
    struct hash_elem hash_elem;

    // Not used
    // Physical address
    void *physical_addr;

    // True if the page is an all-zero page
    // TODO(agf): This is not being used yet. Instead, when loading an
    // executable, we have a non-null "file" field with file_read_bytes == 0.
    bool anonymous;

    // Fields used to lazily load executable files
    struct file *file;
    off_t file_ofs;
    size_t file_read_bytes;
    bool writable;

    // ID for mmap and munmap
    mapid_t mmapid;

    // TODO(agf): If the data is stored in swap, then we need info about that
    // Fields used for loading from swap files
    int swap_page_number;

    struct thread * trd;
};

 

---- ALGORITHMS ----

>> A2: In a few paragraphs, describe your code for locating the frame,
>> if any, that contains the data of a given page.

Given a user virtual address, we find the supplemental page table associated
with thread_current(), and use the user virtual address as a key into the
supplemental page table, which is a hash table. The supplemental page table
has fields that are used if the page is from swap, executable file, or mmapped
file.

>> A3: How does your code coordinate accessed and dirty bits between
>> kernel and user virtual addresses that alias a single frame, or
>> alternatively how do you avoid the issue?

We avoid this issue by checking both the kernel virtual address and the
user virtual address for accessed-ness or dirty-ness.

---- SYNCHRONIZATION ----

>> A4: When two user processes both need a new frame at the same time,
>> how are races avoided?

There are two ways that a new frame can be acquired: From one of palloc's 
pools, or by eviction. palloc already uses a lock to protect its pools.
We uses a global eviction_lock() to make sure that only one process can evict
at a time.

---- RATIONALE ----

>> A5: Why did you choose the data structure(s) that you did for
>> representing virtual-to-physical mappings?

We did not consider many other data structures for the supplemental page table.
It is clear that the key into some sort of collection would need to be the
user virtual address. There are too many user virtual addresses to make an
array feasible (it would be too sparse), so a hash table is a good choice.
We considered using one global hash table with (user virtual address, 
page_directory) as the key, but decided that cleanup would be easier if the
tables were per-process.

		       PAGING TO AND FROM DISK
		       =======================

---- DATA STRUCTURES ----

>> B1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.

# palloc.c's `struct pool` got moved to palloc.h so that we could use it
# from frame table code. In particular, we wanted to call functions like
# page_from_pool(), and we wanted to get the size of the bitmap. The stuct
# definition itself is unchanged.
/*! A memory pool. */
struct pool {
    struct lock lock;                   /*!< Mutual exclusion. */
    struct bitmap *used_map;            /*!< Bitmap of free pages. */
    uint8_t *base;                      /*!< Base of pool. */
};

# Each thread has a pin_begin_page and pin_end_page field. If not NULL, these
# fields describe a range of pages that should be pinned by the pagefault
# handler between acquiring frames and mapping to userspace.
    // Page-aligned pointers or NULL pointers
    // If both are not NULL, then they indicate to the page fault handler that
    // user memory accessses that fall in the pages between pin_begin_page
    // and pin_end_page, inclusive, should be pinned to physical memory
    // after being loaded into physical memory and before being mapped to
    // userspace.
    unsigned char * pin_begin_page;
    unsigned char * pin_end_page;

# From frame.c:
// The address where the frame table begins
static struct ft_entry * frame_table;
// One address past the last entry in the frame table
static struct ft_entry * end_of_frame_table;
// Pointer to the user pool structure from palloc.c
static struct pool * user_pool;
// The page number for the base page of the user pool
static size_t user_pool_base_pg_no;
// The number of frames that can hold user pages.
// Excludes frames that store the user-pool bitmap.
static size_t num_user_frames;
// Used for clock eviction policy.
static struct ft_entry * clock_hand;
// Lock used to protect eviction code
static struct lock eviction_lock;

# From frame.h:
# This represents an entry in the frame table
// Frame table entry
struct ft_entry {
    // Kernel virtual address of page that occupies this frame
    void * kernel_vaddr;
    // User virtual address (if any) of the page that occupies this frame
    void * user_vaddr;
    // Thread associated with this user address
    struct thread * trd;
    // Used to synchronize eviction and pinning
    struct lock lock;
    // Scratch space used during eviction
    bool acquired_during_eviction;
};

# From swap.c:
# These are used to interface with the swap device
static struct block * swap_block;
static int sectors_needed_for_a_page;
static int num_swap_pages;
static struct swapt_entry * swapt;
static struct lock swap_block_lock;

# From swap.h:
// This is an entry in the swap table
struct swapt_entry {
    // Kernel virtual address
    void * kaddr;
    // User virtual address
    void * uaddr;
};

---- ALGORITHMS ----

>> B2: When a frame is required but none is free, some frame must be
>> evicted.  Describe your code for choosing a frame to evict.

We use the "clock" algorithm. We have an array of frame table entries
for frames that are in physical memory. The clock hand sweeps over them one
by one. If it finds one that does not have its accessed bit set, it evicts
it. Otherwise, it clears the accessed bit and moves on.

One wrinkle is that, in order to satisfy palloc(), we gave our eviction 
algorithm the ability to evict multiple contiguous pages. We still check
that all of them have the accessed bit unset; this is just a careful extension
of the clock algorithm.

>> B3: When a process P obtains a frame that was previously used by a
>> process Q, how do you adjust the page table (and any other data
>> structures) to reflect the frame Q no longer has?

There is only one frame table entry for each physical frame. When a page is
evicted from a frame, the frame table entry is cleared. After the frame is 
given to a process again, the frame table entry is set again. 

>> B4: Explain your heuristic for deciding whether a page fault for an
>> invalid virtual address should cause the stack to be extended into
>> the page that faulted.

We cause the stack to be extended into the page that faulted if the following
three conditions are true:
- The page fault occurs at a user address
- The faulting address is no more than 8 MB into userspace. (Thus, the user
  stack size limit is 8 MB.)
- The faulting address is no more than 32 bytes below the stack pointer.

---- SYNCHRONIZATION ----

>> B5: Explain the basics of your VM synchronization design.  In
>> particular, explain how it prevents deadlock.  (Refer to the
>> textbook for an explanation of the necessary conditions for
>> deadlock.)

We still have a global filesystem lock, and we use a global lock to guard frame
eviction code. The one deadlock that we ran into is: What if the filesystem
lock is acquired, and then we need to evict a page before the filesystem lock
is released? Eviction might require writing to swap, which would require the
filesystem lock (since the same block device is used). We avoid this situation
by ensuring that operations (outside of eviction code) that require the 
filesystem lock do not page-fault. We do this by pinning the necessary memory
before the filesystem lock is acquired. For example, to read `n` bytes into a
userspace buffer `buf`, we would do:
pin_pages_by_buffer(buf, n);
filesys_lock_acquire();
file_read(buf, n);
filesys_lock_release();
unpin_pages_by_buffer(buf, n);
The approach for write() is almost identical.

>> B6: A page fault in process P can cause another process Q's frame
>> to be evicted.  How do you ensure that Q cannot access or modify
>> the page during the eviction process?  How do you avoid a race
>> between P evicting Q's frame and Q faulting the page back in?

Frames do have a lock that can be used for this purpose. We try to acquire
this lock during eviction, and we acquire it in order to pin a frame.

>> B7: Suppose a page fault in process P causes a page to be read from
>> the file system or swap.  How do you ensure that a second process Q
>> cannot interfere by e.g. attempting to evict the frame while it is
>> still being read in?

We acquire the eviction lock before reading a page in from swap; this prevents
the page getting read in from getting evicted. Reads from the filesystem end
up being protected by the filesystem lock (since eviction would need to cause
a write to the filesystem.)

>> B8: Explain how you handle access to paged-out pages that occur
>> during system calls.  Do you use page faults to bring in pages (as
>> in user programs), or do you have a mechanism for "locking" frames
>> into physical memory, or do you use some other design?  How do you
>> gracefully handle attempted accesses to invalid virtual addresses?

As previously mentioned, we pin pages in physical memory before read() and 
write() system calls. If other system calls need to page-in, they will do it
through the pagefault handler. Accesses to invalid virtual addresses could
mean that the user stack should grow. Otherwise, the process exits.

---- RATIONALE ----

>> B9: A single lock for the whole VM system would make synchronization
>> easy, but limit parallelism.  On the other hand, using many locks
>> complicates synchronization and raises the possibility for deadlock
>> but allows for high parallelism.  Explain where your design falls
>> along this continuum and why you chose to design it this way.

Our system is as simple as possible; we happily use global locks for the 
filesystem and for eviction code.

			 MEMORY MAPPED FILES
			 ===================

---- DATA STRUCTURES ----

>> C1: Copy here the declaration of each new or changed `struct' or
>> `struct' member, global or static variable, `typedef', or
>> enumeration.  Identify the purpose of each in 25 words or less.


struct spt_entry {
    [...]
    // ID for mmap and munmap
    mapid_t mmapid;
}
For keeping track of id's returned by mmap and used by munmap.
---- ALGORITHMS ----

>> C2: Describe how memory mapped files integrate into your virtual
>> memory subsystem.  Explain how the page fault and eviction
>> processes differ between swap pages and other pages.

Memory mapped files get entries in the same supplemental page table as 
everything else, with the differences that they are always writable and 
have a special id. They are page faulted in in exactly the same manner
as executables. When mmap'd pages are evicted, they are written back 
into the file instead of going into swap.

>> C3: Explain how you determine whether a new file mapping overlaps
>> any existing segment.

When mmap is called, it checks the supplemental page table to see if there
is already an entry for the memory location it is being asked for.
TODO: Check each page of the new file for overlap with old files
To check for stack overlap, it compares the location of the end of the last
page of the file to the location of the stack pointer.

---- RATIONALE ----

>> C4: Mappings created with "mmap" have similar semantics to those of
>> data demand-paged from executables, except that "mmap" mappings are
>> written back to their original files, not to swap.  This implies
>> that much of their implementation can be shared.  Explain why your
>> implementation either does or does not share much of the code for
>> the two situations.

Executables and mmap'd files share the same paging in code because they
use almost exactly the same fields in the supplemental page table. They
have completely separate implementations for write-back because they go
to different places at different times (mmap'd files must be unmapped
when the process exits).

			   SURVEY QUESTIONS
			   ================

Answering these questions is optional, but it will help us improve the
course in future years.  Feel free to tell us anything you want - these
questions are just to spur your thoughts.  Also, feel free to be completely
honest if there are issues with the assignment or the course - you won't be
penalized.  We can't fix things until we know about them.  :-)

>> In your opinion, was this assignment, or any of the parts of it, too
>> easy or too hard?  Did it take too long or too little time?

Way too easy. (Just kidding.)
Aaron: I actually found this really enjoyable, though it took a huge amount
of time.

>> Did you find that working on a particular part of the assignment gave
>> you greater insight into some aspect of OS design?

>> Were there any parts of the assignment that you felt were unnecessarily
>> tedious or pointless?

>> Is there some particular fact or hint we should give students in
>> future quarters to help them solve the problems?  Conversely, did you
>> find any of our guidance to be misleading?

>> Do you have any suggestions for the instructor and/or TAs to more
>> effectively assist students, either for future quarters or the remaining
>> projects?

>> Any other comments?

